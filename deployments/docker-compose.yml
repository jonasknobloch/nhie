version: '3'
services:
  api:
    build:
      context: ..
      dockerfile: build/docker/go/Dockerfile
    image: nhie
    restart: always
    volumes:
      - $GOPATH/pkg/mod/cache:/go/pkg/mod/cache
      - ${GOOGLE_APPLICATION_CREDENTIALS_HOST}:${GOOGLE_APPLICATION_CREDENTIALS}
    depends_on:
      - db
      - redis
      - nginx-proxy
      - nginx-proxy-letsencrypt
    environment:
      GIN_MODE: release
      NHIE_DB_HOST: db
      NHIE_DB_PORT: 5432
      NHIE_DB_NAME: ${NHIE_DB_NAME}
      NHIE_DB_USER: ${NHIE_DB_USER}
      NHIE_DB_PASS: ${NHIE_DB_PASS}
      NHIE_ADMIN_USER: ${NHIE_ADMIN_USER}
      NHIE_ADMIN_PASS: ${NHIE_ADMIN_PASS}
      NHIE_REDIS_HOST: ${NHIE_REDIS_HOST}
      NHIE_TRANSLATE_PROJECT: ${NHIE_TRANSLATE_PROJECT}
      NHIE_TRANSLATE_LOCATION: ${NHIE_TRANSLATE_LOCATION}
      NHIE_TRANSLATE_MODEL: ${NHIE_TRANSLATE_MODEL}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      VIRTUAL_HOST: ${NHIE_API_HOST}
      LETSENCRYPT_HOST: ${NHIE_API_HOST}

  db:
    image: postgres:11
    restart: always
    environment:
      POSTGRES_DB: ${NHIE_DB_NAME}
      POSTGRES_USER: ${NHIE_DB_USER}
      POSTGRES_PASSWORD: ${NHIE_DB_PASS}
    volumes:
      - /mnt/postgresql/data:/var/lib/postgresql/data

  redis:
    image: redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - /mnt/redis/data:/data

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
      - nginx-proxy
      - nginx-proxy-letsencrypt
    environment:
      ADMINER_DESIGN: flat
      VIRTUAL_HOST: ${NHIE_ADMINER_HOST}
      LETSENCRYPT_HOST: ${NHIE_ADMINER_HOST}

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
      - nginx-proxy
      - nginx-proxy-letsencrypt
    volumes:
      - /mnt/metrics/grafana/data:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: ${NHIE_GRAFANA_ROOT_URL}
      GF_SECURITY_ADMIN_PASSWORD: ${NHIE_GRAFANA_PASS}
      VIRTUAL_HOST: ${NHIE_GRAFANA_HOST}
      LETSENCRYPT_HOST: ${NHIE_GRAFANA_HOST}

  prometheus:
    image: prom/prometheus
    entrypoint:
      - /bin/prometheus
      - --log.level=debug
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    depends_on:
      - api
      - nginx-proxy
      - nginx-proxy-letsencrypt
    volumes:
      - /mnt/metrics/prometheus/data:/prometheus
      - /mnt/metrics/prometheus/config:/etc/prometheus

  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    environment:
      DHPARAM_GENERATION: 'false'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'

  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    environment:
      NGINX_PROXY_CONTAINER: api_nginx-proxy
      DEFAULT_EMAIL: ${NHIE_LE_DEFAULT_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    depends_on:
      - nginx-proxy

volumes:
  certs:   # to store certificates
  vhost.d: # to change the configuration of vhosts
  html:    # to write http-01 challenge files